int_libs = # Interface dependencies.
imp_libs = # Implementation dependencies.
#import imp_libs += libhello%lib{hello}

include_dir = $src_root/upstream/include
src_dir = $src_root/upstream/src

lib{elelel-sqlite}: {hxx ixx txx cxx}{ $include_dir/** $src_dir/** } $imp_libs $int_libs


# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

obja{*}: cxx.poptions += -DELELEL_SQLITE_STATIC_BUILD
objs{*}: cxx.poptions += -DELELEL_SQLITE_SHARED_BUILD

# Export options.
#
lib{elelel-sqlite}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $int_libs
}

liba{elelel-sqlite}: cxx.export.poptions += -DELELEL_SQLITE_STATIC
libs{elelel-sqlite}: cxx.export.poptions += -DELELEL_SQLITE_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{elelel-sqlite}: bin.lib.version = @"-$version.project_id"
else
  lib{elelel-sqlite}: bin.lib.version = @"-$version.major.$version.minor"

# Install into the elelel-sqlite/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/elelel-sqlite/
  install.subdirs = true
}
